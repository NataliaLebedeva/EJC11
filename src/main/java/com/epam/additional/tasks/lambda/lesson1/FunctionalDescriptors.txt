Predicate<T>            T -> boolean

Consumer<T>             T -> void

Function<T,R>           T -> R

Supplier<T>             () -> T

UnaryOperator<T>        T -> T

BinaryOperator<T,T>     (T, T) -> T (sum)

BiPredicate<L, R>       (L, R) -> boolean

BiConsumer<T, U>        (T, U) -> void

BiFunction<T, U, R>     (T, U) -> R



Method references:

static              RefType::staticMethod       (args) -> RefType.staticMethod(args)
bound instance      expr::instMethod            (args) -> expr.instMethod(args)
unbound inst        RefType::instMethod         (arg0, restArgs) -> arg0.instMethod(restArgs)
constructor         ClassName::new              (args) -> new ClassName(args)


Intermediate operations:

filter
distinct    stateful (хранит промежут. значения/состояния)     unbounded (не известно, сколько элементов в результате)
skip        stateful        bounded
limit       stateful        bounded
map
flatMap
sorted      stateful        unbounded


Terminal operations
anyMatch
noneMatch
allMatch
findAny
findFirst
forEach
collect
reduce      stateful        bounded     (T, T) -> T     map(o -> 1).reduce()
count


